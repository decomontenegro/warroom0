/**
 * Enhanced Prompt Consolidator
 * Consolida todas as respostas dos agentes e respostas do usu√°rio em um prompt rico
 */

import agentInsightsAnalyzer from './agent-insights-analyzer.js';

export class EnhancedPromptConsolidator {
  constructor() {
    this.maxPromptLength = 8000; // Limite para evitar prompts muito longos
  }

  /**
   * Consolida tudo em um prompt enhanced final
   */
  consolidatePrompt(originalPrompt, agentResponses, userAnswers, questions) {
    // Analisar insights dos agentes
    const analysis = agentInsightsAnalyzer.analyzeAgentResponses(agentResponses, originalPrompt);
    const summary = agentInsightsAnalyzer.generateExecutiveSummary(analysis);
    
    // Estruturar o prompt consolidado
    const sections = [];
    
    // 1. Prompt original refinado
    sections.push(this.buildRefinedPromptSection(originalPrompt, userAnswers, questions));
    
    // 2. Consenso dos especialistas
    sections.push(this.buildConsensusSection(summary.strongConsensus, analysis.totalAgents));
    
    // 3. Insights t√©cnicos detalhados
    sections.push(this.buildTechnicalInsightsSection(analysis));
    
    // 4. Preocupa√ß√µes e mitiga√ß√µes
    sections.push(this.buildConcernsSection(summary.topConcerns, userAnswers));
    
    // 5. Oportunidades estrat√©gicas
    sections.push(this.buildOpportunitiesSection(summary.topOpportunities));
    
    // 6. Decis√µes tomadas pelo usu√°rio
    sections.push(this.buildUserDecisionsSection(userAnswers, questions));
    
    // 7. Roadmap consolidado
    sections.push(this.buildConsolidatedRoadmap(analysis, userAnswers));
    
    // 8. M√©tricas de sucesso
    sections.push(this.buildSuccessMetricsSection(analysis, userAnswers));
    
    // Juntar todas as se√ß√µes
    const consolidatedPrompt = sections
      .filter(section => section && section.trim())
      .join('\n\n---\n\n');
    
    // Garantir que n√£o exceda o limite
    return this.optimizePromptLength(consolidatedPrompt);
  }

  /**
   * Constr√≥i se√ß√£o do prompt refinado
   */
  buildRefinedPromptSection(originalPrompt, userAnswers, questions) {
    let refined = `# üéØ OBJETIVO PRINCIPAL\n\n${originalPrompt}`;
    
    // Adicionar contexto das respostas do usu√°rio
    const contextAnswers = [];
    questions.forEach(q => {
      if (userAnswers[q.id]) {
        contextAnswers.push(`**${q.text}**\n‚Üí ${userAnswers[q.id]}`);
      }
    });
    
    if (contextAnswers.length > 0) {
      refined += `\n\n## üìã Contexto Espec√≠fico\n\n${contextAnswers.join('\n\n')}`;
    }
    
    return refined;
  }

  /**
   * Constr√≥i se√ß√£o de consenso
   */
  buildConsensusSection(strongConsensus, totalAgents) {
    if (!strongConsensus || strongConsensus.length === 0) {
      return '';
    }
    
    let section = `# ü§ù CONSENSO DOS ${totalAgents} ESPECIALISTAS\n\n`;
    section += `Os seguintes pontos tiveram forte concord√¢ncia entre os especialistas:\n\n`;
    
    strongConsensus.forEach(consensus => {
      section += `### ${consensus.point}\n`;
      section += `- **${consensus.agreement}%** dos especialistas concordam\n`;
      section += `- Apoiado por: ${consensus.supportedBy.slice(0, 5).map(s => s.agent).join(', ')}`;
      if (consensus.supportedBy.length > 5) {
        section += ` e mais ${consensus.supportedBy.length - 5} especialistas`;
      }
      section += '\n\n';
    });
    
    return section;
  }

  /**
   * Constr√≥i se√ß√£o de insights t√©cnicos
   */
  buildTechnicalInsightsSection(analysis) {
    let section = `# üí° INSIGHTS T√âCNICOS CONSOLIDADOS\n\n`;
    
    // Agrupar recomenda√ß√µes por categoria
    const techRecommendations = new Map();
    const archRecommendations = new Map();
    const toolRecommendations = new Map();
    
    analysis.expertRecommendations.forEach((rec, key) => {
      if (rec.category === 'technologies' && rec.count >= 2) {
        techRecommendations.set(rec.item, rec);
      } else if (rec.category === 'approaches' && rec.count >= 2) {
        archRecommendations.set(rec.item, rec);
      } else if (rec.category === 'tools' && rec.count >= 2) {
        toolRecommendations.set(rec.item, rec);
      }
    });
    
    // Tecnologias recomendadas
    if (techRecommendations.size > 0) {
      section += `## üõ†Ô∏è Stack Tecnol√≥gica Recomendada\n\n`;
      const sortedTech = Array.from(techRecommendations.values())
        .sort((a, b) => b.count - a.count)
        .slice(0, 10);
      
      sortedTech.forEach(tech => {
        section += `- **${tech.item}** - Recomendado por ${tech.count} especialistas\n`;
        section += `  - Especialistas: ${tech.recommendedBy.slice(0, 3).map(r => r.role).join(', ')}\n`;
      });
      section += '\n';
    }
    
    // Abordagens arquiteturais
    if (archRecommendations.size > 0) {
      section += `## üèóÔ∏è Abordagens Arquiteturais\n\n`;
      Array.from(archRecommendations.values())
        .sort((a, b) => b.count - a.count)
        .slice(0, 5)
        .forEach(approach => {
          section += `- **${approach.item}**\n`;
          section += `  - Apoiado por: ${approach.count} especialistas\n`;
        });
      section += '\n';
    }
    
    return section;
  }

  /**
   * Constr√≥i se√ß√£o de preocupa√ß√µes
   */
  buildConcernsSection(topConcerns, userAnswers) {
    if (!topConcerns || topConcerns.length === 0) {
      return '';
    }
    
    let section = `# ‚ö†Ô∏è PREOCUPA√á√ïES E MITIGA√á√ïES\n\n`;
    
    topConcerns.forEach((concern, index) => {
      section += `## ${index + 1}. ${concern.concern}\n`;
      section += `- Identificado por: ${concern.agent} (${concern.expertise})\n`;
      
      // Sugerir mitiga√ß√£o baseada no contexto do usu√°rio
      const mitigation = this.suggestMitigation(concern, userAnswers);
      if (mitigation) {
        section += `- **Mitiga√ß√£o sugerida**: ${mitigation}\n`;
      }
      section += '\n';
    });
    
    return section;
  }

  /**
   * Constr√≥i se√ß√£o de oportunidades
   */
  buildOpportunitiesSection(topOpportunities) {
    if (!topOpportunities || topOpportunities.length === 0) {
      return '';
    }
    
    let section = `# üöÄ OPORTUNIDADES ESTRAT√âGICAS\n\n`;
    section += `Os especialistas identificaram as seguintes oportunidades de alto impacto:\n\n`;
    
    topOpportunities.forEach((opp, index) => {
      section += `## ${index + 1}. ${opp.opportunity}\n`;
      section += `- Sugerido por: ${opp.agent} (${opp.expertise})\n`;
      section += `- **Impacto potencial**: Alto\n`;
      section += `- **Complexidade**: ${this.estimateComplexity(opp.opportunity)}\n\n`;
    });
    
    return section;
  }

  /**
   * Constr√≥i se√ß√£o de decis√µes do usu√°rio
   */
  buildUserDecisionsSection(userAnswers, questions) {
    const decisions = [];
    
    questions.forEach(q => {
      if (userAnswers[q.id]) {
        decisions.push({
          area: this.extractDecisionArea(q),
          decision: userAnswers[q.id],
          impact: q.priority
        });
      }
    });
    
    if (decisions.length === 0) return '';
    
    let section = `# üìä DECIS√ïES TOMADAS\n\n`;
    
    decisions
      .sort((a, b) => b.impact - a.impact)
      .forEach(decision => {
        section += `- **${decision.area}**: ${decision.decision}\n`;
      });
    
    return section;
  }

  /**
   * Constr√≥i roadmap consolidado
   */
  buildConsolidatedRoadmap(analysis, userAnswers) {
    let section = `# üó∫Ô∏è ROADMAP DE IMPLEMENTA√á√ÉO\n\n`;
    
    // Fase 1: Funda√ß√£o
    section += `## Fase 1: Funda√ß√£o (Primeiras 2-4 semanas)\n\n`;
    section += this.buildPhaseDetails('foundation', analysis, userAnswers);
    
    // Fase 2: Desenvolvimento Core
    section += `## Fase 2: Desenvolvimento Core (M√™s 2-3)\n\n`;
    section += this.buildPhaseDetails('core', analysis, userAnswers);
    
    // Fase 3: Features Avan√ßadas
    section += `## Fase 3: Features Avan√ßadas (M√™s 3-4)\n\n`;
    section += this.buildPhaseDetails('advanced', analysis, userAnswers);
    
    // Fase 4: Otimiza√ß√£o e Lan√ßamento
    section += `## Fase 4: Otimiza√ß√£o e Lan√ßamento (M√™s 4-5)\n\n`;
    section += this.buildPhaseDetails('launch', analysis, userAnswers);
    
    return section;
  }

  /**
   * Constr√≥i detalhes de cada fase
   */
  buildPhaseDetails(phase, analysis, userAnswers) {
    const phaseDetails = {
      foundation: [
        'Setup do ambiente de desenvolvimento',
        'Defini√ß√£o da arquitetura base',
        'Configura√ß√£o de CI/CD',
        'Estrutura de dados inicial',
        'Prot√≥tipo de interface b√°sica'
      ],
      core: [
        'Implementa√ß√£o das funcionalidades principais',
        'Sistema de autentica√ß√£o e autoriza√ß√£o',
        'APIs essenciais',
        'Interface de usu√°rio completa',
        'Testes unit√°rios e integra√ß√£o'
      ],
      advanced: [
        'Features diferenciadas',
        'Otimiza√ß√µes de performance',
        'Integra√ß√µes com terceiros',
        'Sistema de analytics',
        'Refinamento de UX'
      ],
      launch: [
        'Testes de carga e stress',
        'Documenta√ß√£o completa',
        'Prepara√ß√£o de infraestrutura',
        'Estrat√©gia de lan√ßamento',
        'Monitoramento e observabilidade'
      ]
    };
    
    let details = '';
    const tasks = phaseDetails[phase] || [];
    
    tasks.forEach(task => {
      details += `- [ ] ${task}\n`;
    });
    
    return details + '\n';
  }

  /**
   * Constr√≥i se√ß√£o de m√©tricas de sucesso
   */
  buildSuccessMetricsSection(analysis, userAnswers) {
    let section = `# üìà M√âTRICAS DE SUCESSO\n\n`;
    
    // M√©tricas t√©cnicas
    section += `## M√©tricas T√©cnicas\n`;
    section += `- **Performance**: Tempo de resposta < 200ms (P95)\n`;
    section += `- **Disponibilidade**: 99.9% uptime\n`;
    section += `- **Cobertura de testes**: > 80%\n`;
    section += `- **D√©bito t√©cnico**: Manter baixo com refatora√ß√µes regulares\n\n`;
    
    // M√©tricas de neg√≥cio (baseadas nas respostas do usu√°rio)
    section += `## M√©tricas de Neg√≥cio\n`;
    
    if (userAnswers.monetization_strategy) {
      section += `- **Modelo de monetiza√ß√£o**: ${userAnswers.monetization_strategy}\n`;
    }
    
    if (userAnswers.users_scale) {
      section += `- **Escala de usu√°rios**: ${userAnswers.users_scale}\n`;
    }
    
    section += `- **Satisfa√ß√£o do usu√°rio**: NPS > 50\n`;
    section += `- **Taxa de reten√ß√£o**: > 40% ap√≥s 30 dias\n`;
    
    return section;
  }

  /**
   * Helpers
   */
  suggestMitigation(concern, userAnswers) {
    const concernLower = concern.concern.toLowerCase();
    
    if (concernLower.includes('seguran√ßa') || concernLower.includes('security')) {
      return 'Implementar pr√°ticas de seguran√ßa desde o in√≠cio: HTTPS, autentica√ß√£o robusta, valida√ß√£o de inputs, e auditoria regular';
    }
    
    if (concernLower.includes('escala') || concernLower.includes('scale')) {
      return 'Arquitetura preparada para escala: cache distribu√≠do, microservi√ßos quando necess√°rio, e monitoramento proativo';
    }
    
    if (concernLower.includes('complexidade')) {
      return 'Come√ßar simples e iterar: MVP focado, documenta√ß√£o clara, e refatora√ß√£o cont√≠nua';
    }
    
    return null;
  }

  estimateComplexity(opportunity) {
    const oppLower = opportunity.toLowerCase();
    
    if (oppLower.includes('simples') || oppLower.includes('b√°sico')) {
      return 'Baixa';
    }
    
    if (oppLower.includes('avan√ßado') || oppLower.includes('complexo')) {
      return 'Alta';
    }
    
    return 'M√©dia';
  }

  extractDecisionArea(question) {
    const id = question.id;
    const text = question.text;
    
    // Mapear IDs conhecidos
    const areaMap = {
      'platform': 'Plataforma',
      'architecture_preference': 'Arquitetura',
      'monetization_strategy': 'Monetiza√ß√£o',
      'tech_preference': 'Tecnologia',
      'platform_priority': 'Prioridade de Plataforma',
      'team_size': 'Tamanho da Equipe',
      'timeline': 'Prazo',
      'budget_range': 'Or√ßamento'
    };
    
    return areaMap[id] || text.split('?')[0].trim();
  }

  optimizePromptLength(prompt) {
    if (prompt.length <= this.maxPromptLength) {
      return prompt;
    }
    
    // Se muito longo, priorizar se√ß√µes mais importantes
    const sections = prompt.split('\n\n---\n\n');
    const prioritizedSections = sections.slice(0, 6); // Pegar as 6 primeiras se√ß√µes
    
    return prioritizedSections.join('\n\n---\n\n') + 
           '\n\n---\n\n# üìù NOTA\n\nPrompt otimizado para tamanho. Informa√ß√µes completas dispon√≠veis mediante solicita√ß√£o.';
  }
}

export default new EnhancedPromptConsolidator();